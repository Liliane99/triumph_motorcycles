generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id          String   @id @default(uuid()) 
  user_name        String
  email            String   @unique
  password         String
  role             String
  phone_number     String?
  license_number   String?
  experience_level String?
  created_by       String?  
  updated_by       String? 
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  createdMotorcycles  Motorcycle[] @relation("CreatedMotorcycles")
  updatedMotorcycles  Motorcycle[] @relation("UpdatedMotorcycles")
  MotorcycleOwner     Motorcycle[] @relation("MotorcycleOwner")

  creator         User? @relation("CreatedUsers", fields: [created_by], references: [user_id])
  createdUsers    User[] @relation("CreatedUsers")

  updater         User? @relation("UpdatedUsers", fields: [updated_by], references: [user_id]) 
  updatedUsers    User[] @relation("UpdatedUsers")

  createdParts    Part[] @relation("CreatedParts")
  updatedParts    Part[] @relation("UpdatedParts")

  createdOrders   Order[] @relation("CreatedOrders")
  updatedOrders   Order[] @relation("UpdatedOrders")

  rentals         Rental[] @relation("UserRentals")

  createdTrials   Trial[] @relation("CreatedTrials")
  updatedTrials   Trial[] @relation("UpdatedTrials")
  trialParticipations Trial[] @relation("UserTrials")
  drivers        Driver[] @relation("UserDrivers")
 
}

model Part {
  part_id          String    @id @default(uuid())
  part_reference   String    @unique
  part_type        String
  part_name        String
  quantity_in_stock Int
  part_threshold   Int
  unit_price       Decimal
  created_by       String
  updated_by       String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  creator         User @relation("CreatedParts", fields: [created_by], references: [user_id])
  updater         User? @relation("UpdatedParts", fields: [updated_by], references: [user_id])

  orders          OrderPart[]
  maintenances     Maintenance[] @relation("PartMaintenances")
}

model Order {
  order_id         String   @id @default(uuid())
  order_reference  String    @unique
  order_date       DateTime 
  delivery_date    DateTime?
  created_by       String
  updated_by       String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  creator         User @relation("CreatedOrders", fields: [created_by], references: [user_id])
  updater         User? @relation("UpdatedOrders", fields: [updated_by], references: [user_id])

  parts           OrderPart[]
}

model OrderPart {
  order_id        String
  part_id         String
  quantity_ordered Int

  order          Order @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  part           Part @relation(fields: [part_id], references: [part_id], onDelete: Cascade)

  @@id([order_id, part_id]) 
}
  
  

model Motorcycle {
  id           String @id @default(uuid())
  brand        String
  model        String
  purchaseDate DateTime 
  licensePlate String @unique
  kilometers   Int
  warrantyDate DateTime 
  maintenanceInterval Int
  ownerId      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  
  createdBy    String?  
  updatedBy    String?  

  
  creator              User?    @relation("CreatedMotorcycles", fields: [createdBy], references: [user_id])
  updater              User?    @relation("UpdatedMotorcycles", fields: [updatedBy], references: [user_id])
  owner                User     @relation("MotorcycleOwner", fields: [ownerId], references: [user_id]) 

  rentals           Rental[] @relation("MotorcycleRentals")
  maintenances      Maintenance[] @relation("MotorcycleMaintenances")
  trials            Trial[] @relation("MotorcycleTrials")
  drivers           Driver[] @relation("MotorcycleDrivers")
  incidents       Incident[] @relation("MotorcycleIncidents")
}

model Rental {
  id             String   @id @default(uuid())
  reference      String   @unique
  rentalDate     DateTime
  price          Int
  clientId       String
  motorcycleId   String
  
  client         User     @relation("UserRentals", fields: [clientId], references: [user_id])
  motorcycle     Motorcycle @relation("MotorcycleRentals", fields: [motorcycleId], references: [id])

  createdBy    String?  
  updatedBy    String? 

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([clientId, motorcycleId]) 
}

model Maintenance {
  id               String       @id @default(uuid())
  reference        String       @unique
  date             DateTime
  technician       String
  recommendation   String
  pricePartTotal   Decimal
  priceLabour      Decimal
  priceTotal       Decimal
  motorcycleId     String
  partId           String

  motorcycle       Motorcycle   @relation("MotorcycleMaintenances", fields: [motorcycleId], references: [id])
  part             Part         @relation("PartMaintenances", fields: [partId], references: [part_id])

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([motorcycleId, partId])
}

model Trial {
  userId       String
  motorcycleId String
  startDate    DateTime
  endDate      DateTime
  created_by   String
  updated_by   String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  user         User        @relation("UserTrials", fields: [userId], references: [user_id])
  motorcycle   Motorcycle  @relation("MotorcycleTrials", fields: [motorcycleId], references: [id])

  creator      User        @relation("CreatedTrials", fields: [created_by], references: [user_id])
  updater      User?       @relation("UpdatedTrials", fields: [updated_by], references: [user_id])

  @@id([userId, motorcycleId]) 
}

model Incident {
  id             String   @id @default(uuid())
  reference      String   @unique
  description    String
  date           DateTime
  motorcycleId   String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  motorcycle     Motorcycle @relation("MotorcycleIncidents", fields: [motorcycleId], references: [id])
 

  @@index([motorcycleId])
}

model Incident {
  id             String   @id @default(uuid())
  reference      String   @unique
  description    String
  date           DateTime
  motorcycleId   String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  motorcycle     Motorcycle @relation("MotorcycleIncidents", fields: [motorcycleId], references: [id])
 

  @@index([motorcycleId])
}

model Driver {
  driver_id       String   @id @default(uuid())
  license_number  String
  experience_level String?
  date_of_birth   DateTime
  client_id       String
  motorcycle_id   String

  client          User       @relation("UserDrivers", fields: [client_id], references: [user_id])
  motorcycle      Motorcycle @relation("MotorcycleDrivers", fields: [motorcycle_id], references: [id])

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@index([client_id, motorcycle_id])
}
